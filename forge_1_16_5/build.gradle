plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

archivesBaseName = "${rootProject.archives_base_name}-${minecraft_version}"

architectury {
    platformSetupLoomIde()
    forge()
    minecraft = minecraft_version
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    forge "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

loom {
    forge {
        mixinConfig "cloudsettings.mixins.json"
    }
}

processResources {
    def majorForgeVersion = project.forge_version.substring(0, project.forge_version.indexOf('.'))

    inputs.property "version", project.version
    inputs.property "majorForgeVersion", majorForgeVersion
    inputs.property "minecraftVersion", project.minecraft_version
    inputs.property "nextMinecraftVersion", rootProject.getNextMajorMinecraftVersion(project.minecraft_version)

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version,
                "majorForgeVersion": majorForgeVersion,
                "minecraftVersion": project.minecraft_version,
                "nextMinecraftVersion": rootProject.getNextMajorMinecraftVersion(project.minecraft_version)
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier "forge"
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

task copyResultToRootProject {
    doLast {
        def sourcePath = "${project.getProjectDir().toString()}/build/libs/${archivesBaseName}-${version}-forge.jar"
        def destinationPath = "${rootProject.getProjectDir().toString()}/build/libs/"
        println("Copying result file from ${sourcePath} to ${destinationPath}")
        copy {
            from sourcePath
            into destinationPath
        }
    }
}
build.finalizedBy(copyResultToRootProject)

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

unifiedPublishing {
    project {
        displayName = "${minecraft_version}-${version}-Forge"
        gameLoaders = ['forge']
        gameVersions= [minecraft_version]
        version = version
        changelog = file("${rootProject.rootDir.path}/Changelog.md").text
        releaseType = "release"
        mainPublication tasks.remapJar

        var CURSE_API_KEY = project.findProperty("curseforge_apikey") ?: System.getenv("CF_API_KEY")
        if (CURSE_API_KEY != null) {
            curseforge {
                token = CURSE_API_KEY
                id = '622165'
                gameVersions.addAll("Java 8", "Java 11")
            }
        }

        var MODRINTH_TOKEN = project.findProperty("modrinth_apikey") ?: System.getenv("MODRINTH_TOKEN")
        if (MODRINTH_TOKEN != null) {
            modrinth {
                token = MODRINTH_TOKEN
                id = 'nnu4dJj4'
            }
        }
    }
}