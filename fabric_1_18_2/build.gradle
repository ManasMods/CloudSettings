plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
    minecraft = minecraft_version
}

archivesBaseName = "${rootProject.archives_base_name}-${minecraft_version}"

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraftVersion", project.minecraft_version

    filesMatching("fabric.mod.json") {
        expand "version": project.version, "minecraftVersion": project.minecraft_version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier "fabric"
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

task copyResultToRootProject {
    doLast {
        def sourcePath = "${project.getProjectDir().toString()}/build/libs/${archivesBaseName}-${version}-fabric.jar"
        def destinationPath = "${rootProject.getProjectDir().toString()}/build/libs/"
        println("Copying result file from ${sourcePath} to ${destinationPath}")
        copy {
            from sourcePath
            into destinationPath
        }
    }
}
build.finalizedBy(copyResultToRootProject)

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}